@startuml LayoutPanes
''''''''''
' Page 1 '
''''''''''
title GUI - Layout

enum HAlignment {
    Left
    Center
    Right
}

enum VAlignment {
    Top
    Center
    Bottom
}

enum ViewState {
    Opening
    Open
    Greedy
    Closing
    Closed
    Hiding
    Hidden
}

abstract class View {
    + Content : ContentManager <<get>> <<protected set>>
    + State : ViewState <<get>> <<protected set>>
    + Graphics : GraphicsDevice <<get>> <<protected set>>
    + MainContainer : ViewContainer <<get>>
    + {abstract}Show() : void
    + {abstract}Hide() : void
    + {abstract}Close() : void
    + {virtual}HandleInput() : void
    + {virtual}Update(gameTime : GameTime) : void
    + Draw(spriteBatch : SpriteBatch) : void
    # AlignMainContainer() : void
}

View -left-> GraphicsDevice
View -right-> ContentManager
note top on link
Content is loaded on View
initialization. ContentMangagers
can be shared among different
views.
end note

class FadingView {
    + FadeInTime : int <<get>> <<set>>
    + FadeOutTime : int <<get>> <<set>>    
}

note right: Example:\nFades in/out
FadingView -up-|> View

class SlidingView
note right: Example:\nSlides in/out (TODO)
SlidingView -up-|> View

class ViewControl {
    + Views : ReadOnlyCollection<View> <<get>> <<protected set>>
    + Add(view : View) : void
    + Remove(view : View) : void
    + Update(gameTime : GameTime) : void
    + Draw(spriteBatch : SpriteBatch) : void
}

ViewControl --> "*" View : Views

abstract class Component {
    + HGrow : int <<get>> <<set>>
    + VGrow : int <<get>> <<set>>
    + HAlign : HAlignment <<get>> <<set>>
    + VAlign : VAlignment <<get>> <<set>>
    + Color : Color <<get>> <<set>>
    + Alpha : float <<get>> <<set>>
    + Position : Vector2 <<get>> <<protected set>>
    + X : float <<get>> <<protected set>>
    + Y : float <<get>> <<protected set>>
    + Size : Vector2 <<get>> <<protected set>>
    + Width : float <<get>> <<protected set>>
    + Height : float <<get>> <<protected set>>
    + Parent : Container <<get>> <<protected set>>
    + PropertyChanged : PropertyChangedEventHandler
    + {virtual}Load(content : ContentManager) : void
    + {abstract}Update(gameTime : GameTime) : void
    + {abstract}Draw(spriteBatch : SpriteBatch) : void
    # {virtual}OnPropertyChanged(propertyName : string) : void
    # SetProperty<T>(field : ref T, value : T) : void
    # {static}_SetPosition(c : Component, position : Vector2) : void
    # {static}_SetX(c : Component, x : float) : void
    # {static}_SetY(c : Component, y : float) : void
    # {static}_SetSize(c : Component, size : Vector2) : void
    # {static}_SetWidth(c : Component, width : float) : void
    # {static}_SetHeight(c : Component, height : float) : void
    # {static}_SetParent(c : Component, parent : Container) : void
}

Component --> "0, 1" Container : Parent

abstract class Container {
    + Children : ReadOnlyCollection<Component> <<get>> <<protected set>>
    + Containers : ReadOnlyCollection<Container> <<get>> <<protected set>>
    + Controls : ReadOnlyCollection<IControlable> <<get>> <<protected set>>
    + {override}Load(conent : ContentManager) : void
    + {override}Update(gameTime : GameTime) : void
    + {override}Draw(spriteBatch : SpriteBatch) : void
    # {virtual}ChildPropertyChangedHandler(sender : object, args : PropertyChangedEventArgs) : void
    # {virtual}AlignChildren() : void
}

class ViewContainer {
    + SetPosition(position : Vector2) : void
    + SetSize(position : Vector2) : void
}

ViewContainer --|> Container
View --> "1" ViewContainer : MainContainer

interface IControlable {
    + HandleInput() : void
}

Container -up-|> Component
Container --> "*" Component : Children
Container --> "*" Container : Containers
Container --> "*" IControlable : Controls

abstract class LayoutPane {
    + Add(child : Component) : void
    + Remove(child : Component)
}

LayoutPane -right-|> Container

class HPane {
    # {override}AlignChildren() : void
}

note bottom
The order of items is determined by
their HAlignment and the order they
where added to this Container.
VAlignment determines how items are
aligned within their column.
end note

class VPane {
    # {override}AlignChildren() : void
}

note bottom
The order of items is determined by
their VAlignment and the order they
where added to this Container.
HAlignment determines how items are
aligned within their row.
end note

class StackPane
note left
Items are stacked on top of each
other in the order they where added
to this Container. The positioning
of items according to their H- and
VAlignment is evaluated for each item
independent of the other items.
end note

HPane -up-|> LayoutPane
VPane -up-|> LayoutPane
StackPane -|> LayoutPane


''''''''''
' Page 2 '
''''''''''
newpage
title GUI - Controls

enum Orientation {
    Horizontal
    RHorizontal
    Vertical
    RVertical
}

class TextItem {
    + Font : SpriteFont <<get>> <<set>>
    + Text : string <<get>> <<set>>
    + {override} Update(gameTime : GameTime) : void
    + {override} Draw(spriteBatch : SpriteBatch) : void
}

class ImageItem {
    + Image : Texture2D <<get>> <<protected set>>
    + {override} Update(gameTime : GameTime) : void
    + {override} Draw(spriteBatch : SpriteBatch) : void
}

abstract class Component
TextItem -up-|> Component
ImageItem -up-|> Component

abstract class Control {
    + IsFocused : bool <<get>> <<protected set>>
    + IsDisabled : bool <<get>> <<protected set>>
    + Action : EventHandler
    + Enabled : EventHandler
    + Disabled : EventHandler
    + FocusGain : EventHandler
    + FocusLoss : EventHandler
    + KeyPressed : KeyEventHandler
    + KeyReleased : KeyEventHandler
    # {virtual} HandleMouse() : void
    # {virtula} HandleKeyboard() : void
    # {virtual} HandleGamepad() : void
    # {virtual} HandleTouch() : void
    # {virtual} OnAction() : void
    # {virtual} OnEnabled() : void
    # {virtual} OnDisabled() : void
    # {virtual} OnFocusGain() : void
    # {virtual} OnFocusLoss() : void
    # {virtual} OnKeyPressed() : void
    # {virtual} OnKeyReleased() : void
    # HandleInput() : void
}

abstract class Container
Control -up-|>Container

class MenuItem {
    + Orientation : Orientation <<get>> <<protected set>>
    + Text : TextItem <<get>> <<protected set>>
    + Image : ImageItem <<get>> <<protected set>>
}

MenuItem -up-|> Control
MenuItem -up-> "0, 1" TextItem : Text
MenuItem -up-> "0, 1" ImageItem : Image

abstract class Menu {
    + Items : ReadOnlyCollection<MenuItem> <<get>> <<protected set>>
    + AddItem(item : MenuItem) : void
    + RemoveItem(item : MenuItem) : void
    # {abstract} AlignItems() : void
}

Menu -up-|> MenuItem
Menu --> "*" MenuItem

class ListMenu {
    + {unused} SelectedIndex : int <<get>> <<protected set>>
    + ItemsOrientation : Orientation <<get>> <<set>>
    # {override} AlignItems() : void
    # {override} OnPropertyChanged(propertyName : string) : void
}

class RingMenu {

}
note bottom: TODO

ListMenu -up-|> Menu
RingMenu -up-|> Menu

class TextBox {
    + Text : string <<get>> <<protected set>>
    + IsFocused : bool <<get>> <<protected set>>
    + TextBoxTexture : Texture2D <<get>> <<protected set>>
    + TextBoxColor : Color <<get>> <<set>>
}

TextBox -left-|> Control

class ScrollBar {
    + ScrollBarPosition : float <<get>> <<protected set>>
    + ScrollBarTexture : Texture2D <<get>> <<protected set>>
    + ScrollTexture : Texture2D <<get>> <<protected set>>
    + ScrollColor : Color <<get>> <<set>>
}

ScrollBar -up-|> Control

class ProgressBar {
    + Progress : float <<get>> <<set>>
    + ProgressBarTexture : Texture2D <<get>> <<protected set>>
    + BackgroundTexture : Texture2D <<get>> <<protected set>>
    + BackgroundColor : Color <<get>> <<set>>
}

ProgressBar -up-|> Control

class CheckBox
class RadioBox
class RadioGroup

CheckBox -left-|> Control
RadioBox -left-|> Control
RadioGroup --> "*" RadioBox : Radios

@enduml