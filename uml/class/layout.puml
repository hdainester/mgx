@startuml LayoutPanes
''''''''''
' Page 1 '
''''''''''
title GUI - Layout

enum HAlignment {
    Left
    Center
    Right
}

enum VAlignment {
    Top
    Center
    Bottom
}

enum ViewState {
    Opening
    Open
    Greedy
    Closing
    Closed
    Hiding
    Hidden
}

class ViewControl {
    + AddView(view : View) : void
    + RemoveView(view : View) : void
    + Update(gameTime : GameTime) : void
    + Draw(spriteBatch : SpriteBatch) : void
}

abstract class View {
    + State : ViewState <<get>> <<protected set>>
    + MainContainer : Container <<get>>
    + {abstract}Show() : void
    + {abstract}Hide() : void
    + {abstract}Close() : void
    + {virtual}HandleInput() : void
}

class FadingView
note right: Example:\nFades in/out

class SlidingView
note right: Example:\nSlides in/out

abstract class Component {
    + HGrow : int <<get>> <<set>>
    + VGrow : int <<get>> <<set>>
    + HAlign : HAlignment <<get>> <<set>>
    + VAlign : VAlignment <<get>> <<set>>
    + Color : Color <<get>> <<set>>
    + Alpha : float <<get>> <<set>>
    + X : float <<get>> <<protected set>>
    + Y : float <<get>> <<protected set>>
    + {abstract}Width : float <<get>> <<protected set>>
    + {abstract}Height : float <<get>> <<protected set>>
    + {abstract}Update(gameTime : GameTime) : void
    + {abstract}Draw(spriteBatch : SpriteBatch) : void
}

abstract class Container {
    # {abstract}AlignChildren() : void
    + {override}Update(gameTime : GameTime) : void
    + {override}Draw(spriteBatch : SpriteBatch) : void
}

class HPane
note right
The order of items is determined by
their HAlignment and the order they
where added to this Container.
VAlignment determines how items are
aligned within their column.
end note

class VPane
note right
The order of items is determined by
their VAlignment and the order they
where added to this Container.
HAlignment determines how items are
aligned within their row.
end note

class StackPane
note right
Items are stacked on top of each
other in the order they where added
to this Container. The positioning
of items according to their H- and
VAlignment is evaluated for each item
independent of the other items.
end note

abstract class Control

FadingView -up-|> View
SlidingView -up-|> View
Control -right-|> Component
Container -up-|> Component
HPane -up-|> Container
VPane -up-|> Container
StackPane -up-|> Container
ViewControl --> "*" View
View --> Container : MainContainer
Component --> "0, 1" Container : Parent
Container --> "*" Component : Children
Container -left-> "*" Control : Controls

''''''''''
' Page 2 '
''''''''''
newpage
title GUI - Controls

enum Alignment {
    Horizontal
    RHorizontal
    Vertical
    RVertical
}

abstract class Component
abstract class Control {
    + Disabled : bool <<get>> <<set>>
    + ActionEvent : ActionEventHandler
    + TouchInputEvent: TouchEventHandler
    + KeyPressedEvent : KeyboardEventHandler
    + KeyReleasedEvent : KeyboardEventHandler
    + MouseClickedEvent : MouseEventHandler
    + MouseReleasedEvent : MouseEventHandler
    + {override}Update(gameTime : GameTime) : void
    # {virtual}HandleInput() : void
    # {virtual}OnAction() : void
    # {virtual}OnTouchInput() : void
    # {virtual}OnKeyPressed() : void
    # {virtual}OnKeyReleased() : void
    # {virtual}OnMouseClicked() : void
    # {virtual}OnMouseReleased() : void
}

interface Toggable {
    + Toggled : bool <<get>> <<set>>
}

interface Alignable {
    + Align : Alignment <<get>> <<set>>
}

interface Stylable {
    + Textures : Collection<Texture2D> <<get>> <<protected set>>
}

note right: TODO

abstract class SelectableControl {
    + {abstract}Selected : bool <<get>> <<set>>
}

class Checkbox
class Radiobox
class RadioGroup

class Textbox {
    + Text : string <<get>> <<protected set>>
    + Focused : bool <<get>> <<protected set>>
    + TextboxTexture : Texture2D <<get>> <<protected set>>
    + TextboxTexture : Texture2D <<get>> <<protected set>>
    + TextboxColor : Color <<get>> <<set>>
}

class Scrollbar {
    + ScrollbarPosition : float <<get>> <<protected set>>
    + ScrollbarTexture : Texture2D <<get>> <<protected set>>
    + ScrollTexture : Texture2D <<get>> <<protected set>>
    + ScrollColor : Color <<get>> <<set>>
}

class Progressbar {
    + Progress : float <<get>> <<set>>
    + ProgressbarTexture : Texture2D <<get>> <<protected set>>
    + BackgroundTexture : Texture2D <<get>> <<protected set>>
    + BackgroundColor : Color <<get>> <<set>>
}

abstract class Menu {
    + SelectedIndex : int <<get>> <<protected set>>
    + SelectedItem : Selectable <<get>> <<protected set>>
    # {abstract}AlignItems() : void
}

class HList
class VList

class TextItem {
    + Font : Font2D <<get>> <<set>>
    + Text : string <<get>> <<set>>
}

class ImageItem {
    + Image : Image2D <<get>> <<set>>
}

class MenuItem {
    + Font : Font2D <<get>> <<set>>
    + Text : string <<get>> <<set>>
    + Image : Image2D <<get>> <<set>>
}

Control -up-|> Component
TextItem -right-|> Component
ImageItem -left-|> Component
MenuItem -up-|> SelectableControl
MenuItem ..|> Alignable
Checkbox -up-|> SelectableControl
Checkbox ..|> Toggable
Checkbox ..|> Alignable
Radiobox -up-|> SelectableControl
Radiobox ..|> Toggable
Radiobox ..|> Alignable
Textbox -up-|> Control
Textbox ..|> Alignable
Scrollbar -up-|> Control
Scrollbar ..|> Alignable
Progressbar -up-|> Control
Progressbar ..|> Alignable
Menu -up-|> MenuItem
HList -right-|> Menu
VList -left-|> Menu
SelectableControl -up-|> Control

Menu -up-> "*" SelectableControl : Items
SelectableControl --> "0, 1" Menu : Menu
RadioGroup -up-> "*" Radiobox
Radiobox -up-> "0, 1" RadioGroup : Group

@enduml